// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BusinessContext))]
    [Migration("20250617160031_ResetTotal")]
    partial class ResetTotal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ProductEntity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProductTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<int>("StockStore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductTransactionId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductTransactionEntity.ProductTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductTransaction", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProviderEntity.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<int>>("CI")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<int>>("Number")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("ProviderLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity.Product", b =>
                {
                    b.HasOne("Domain.Entities.ProductTransactionEntity.ProductTransaction", "ProductTransaction")
                        .WithMany("Products")
                        .HasForeignKey("ProductTransactionId");

                    b.HasOne("Domain.Entities.ProviderEntity.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.ProductValueObjects.Cost", "Cost", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("Domain.ValueObjects.MoneyValueObjects.Money", "CostVO", b2 =>
                                {
                                    b2.Property<int>("CostProductId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Amaunt")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("integer")
                                        .HasColumnName("precio_amount");

                                    b2.Property<string>("CurrencyVO")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("precio_divisa");

                                    b2.HasKey("CostProductId");

                                    b2.ToTable("Product");

                                    b2.WithOwner()
                                        .HasForeignKey("CostProductId");
                                });

                            b1.Navigation("CostVO")
                                .IsRequired();
                        });

                    b.OwnsOne("Domain.ValueObjects.ProductValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("integer");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("Domain.ValueObjects.MoneyValueObjects.Money", "PriceVO", b2 =>
                                {
                                    b2.Property<int>("PriceProductId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Amaunt")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("integer")
                                        .HasColumnName("precio_amount");

                                    b2.Property<string>("CurrencyVO")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("precio_divisa");

                                    b2.HasKey("PriceProductId");

                                    b2.ToTable("Product");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceProductId");
                                });

                            b1.Navigation("PriceVO")
                                .IsRequired();
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ProductTransaction");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Domain.Entities.ProductTransactionEntity.ProductTransaction", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProviderEntity.Provider", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
